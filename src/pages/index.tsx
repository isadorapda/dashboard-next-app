import Head from 'next/head'
import { Button, Flex, Stack } from '@chakra-ui/react'
import { SubmitHandler, useForm } from 'react-hook-form'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import { Input } from '@/components/Form/input'

const signInFormSchema = z.object({
  email: z.string().email({ message: 'Please, inform your e-mail.' }),
  password: z
    .string({ required_error: 'Please, inform your password.' })
    .min(6, { message: 'Your password should contain at least 6 characters.' }),
})

type SignInFormData = z.infer<typeof signInFormSchema>

export default function SignIn() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<SignInFormData>({ resolver: zodResolver(signInFormSchema) })

  const handleSignIn: SubmitHandler<SignInFormData> = async (data) => {
    await new Promise((resolve) => setTimeout(resolve, 2000))
    console.log(data)
  }

  return (
    <>
      <Head>
        <title>Dashboard Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex w={'100vw'} h={'100vh'} align={'center'} justify={'center'}>
        <Flex
          as="form"
          w={'100%'}
          maxW={'30vw'}
          bg="gray.800"
          p="8"
          borderRadius={8}
          flexDir="column"
          onSubmit={handleSubmit(handleSignIn)}
        >
          <Stack spacing="4">
            <Input
              label="E-mail"
              type="email"
              error={errors.email}
              {...register('email')}
            />
            <Input
              label="Password"
              type="password"
              error={errors.password}
              {...register('password')}
            />
          </Stack>

          <Button
            type="submit"
            mt="6"
            colorScheme="pink"
            size="lg"
            isLoading={isSubmitting}
          >
            Log in
          </Button>
        </Flex>
      </Flex>
    </>
  )
}
